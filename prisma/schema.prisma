generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  surname   String?
  email     String   @unique
  hashedPassword String?
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())

  // Relations
  eventsCreated   Event[]     @relation("AdminCreatedEvents") // Events as templates
  userEvents      UserEvent[] @relation("UserEvents") // Events actually planned by user
  attendingEvents UserEvent[] @relation("UserEventParticipants")

  accounts         Account[]
  sessions         Session[]
  availabilities   Availability[]
  createdLocations Location[]
}

enum EventType {
  AUTRE
  GAMING
  JEUX_DE_SOCIETE
  CULTURE
  SCOLAIRE
  ART
  MUSIQUE
  CODE_WEB_TECH
  BAR_CLUB
  SPORT
}

model Event {
  id          String     @id @default(cuid())
  activity    String
  type        EventType  @default(AUTRE)
  proposable  Boolean     @default(true)
  locations   Location[] @relation("EventLocations")
  createdBy   User       @relation("AdminCreatedEvents", fields: [createdById], references: [id])
  createdById String

  userEvents UserEvent[] // Inverse of relation from UserEvent to Event
}

model UserEvent {
  id          String   @id @default(cuid())
  activity    String
  date        DateTime
  location    Location @relation(fields: [locationId], references: [id])
  locationId  String
  createdBy   User     @relation("UserEvents", fields: [createdById], references: [id])
  createdById String

  participants User[]  @relation("UserEventParticipants")
  Event        Event?  @relation(fields: [eventId], references: [id])
  eventId      String?
}

model Location {
  id          String      @id @default(cuid())
  name        String
  address     String
  link        String?
  createdBy   User        @relation(fields: [createdById], references: [id])
  createdById String
  events      Event[]     @relation("EventLocations") // Templates
  userEvents  UserEvent[]
}

enum Role {
  STUDENT
  ADMIN
}

model Availability {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  createdAt DateTime @default(now())

  @@unique([userId, date])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
